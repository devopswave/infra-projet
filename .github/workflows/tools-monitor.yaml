name: Terraform Outputs and Deploy

on:
  workflow_dispatch: # Permet l'ex√©cution manuelle via l'interface GitHub

jobs:
  deploy_with_terraform:
    name: 'Parse Terraform Outputs and Deploy'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.3.2'

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-west-3'

      - name: 'Terraform Init'
        run: terraform init

      - name: 'Terraform Plan'
        id: terraform_plan
        run: terraform plan

      - name: 'Install kubectl'
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      
      - name: 'Get kubeconfig'
        run: |
          terraform output -raw kubeconnect
      
      - name: 'Install Helm'
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
            
      - name: 'Add Prometheus Helm Repo'
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
      
      - name: 'Install Prometheus'
        run: |
          kubectl create namespace monitoring
          helm install monitoring prometheus-community/kube-prometheus-stack -n monitoring
      
      - name: 'Install ArgoCD'
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      - name: 'Wait for ArgoCD to be ready'
        run: |
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
        
      - name: 'Expose ArgoCD server'
        run: |
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
      